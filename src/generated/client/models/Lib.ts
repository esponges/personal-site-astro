
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Lib` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Lib
 * 
 */
export type LibModel = runtime.Types.Result.DefaultSelection<Prisma.$LibPayload>

export type AggregateLib = {
  _count: LibCountAggregateOutputType | null
  _min: LibMinAggregateOutputType | null
  _max: LibMaxAggregateOutputType | null
}

export type LibMinAggregateOutputType = {
  id: string | null
  name: string | null
  url: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LibMaxAggregateOutputType = {
  id: string | null
  name: string | null
  url: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LibCountAggregateOutputType = {
  id: number
  name: number
  url: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type LibMinAggregateInputType = {
  id?: true
  name?: true
  url?: true
  createdAt?: true
  updatedAt?: true
}

export type LibMaxAggregateInputType = {
  id?: true
  name?: true
  url?: true
  createdAt?: true
  updatedAt?: true
}

export type LibCountAggregateInputType = {
  id?: true
  name?: true
  url?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type LibAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Lib to aggregate.
   */
  where?: Prisma.LibWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Libs to fetch.
   */
  orderBy?: Prisma.LibOrderByWithRelationInput | Prisma.LibOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LibWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Libs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Libs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Libs
  **/
  _count?: true | LibCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LibMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LibMaxAggregateInputType
}

export type GetLibAggregateType<T extends LibAggregateArgs> = {
      [P in keyof T & keyof AggregateLib]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLib[P]>
    : Prisma.GetScalarType<T[P], AggregateLib[P]>
}




export type LibGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LibWhereInput
  orderBy?: Prisma.LibOrderByWithAggregationInput | Prisma.LibOrderByWithAggregationInput[]
  by: Prisma.LibScalarFieldEnum[] | Prisma.LibScalarFieldEnum
  having?: Prisma.LibScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LibCountAggregateInputType | true
  _min?: LibMinAggregateInputType
  _max?: LibMaxAggregateInputType
}

export type LibGroupByOutputType = {
  id: string
  name: string
  url: string
  createdAt: Date
  updatedAt: Date
  _count: LibCountAggregateOutputType | null
  _min: LibMinAggregateOutputType | null
  _max: LibMaxAggregateOutputType | null
}

type GetLibGroupByPayload<T extends LibGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LibGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LibGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LibGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LibGroupByOutputType[P]>
      }
    >
  > 



export type LibWhereInput = {
  AND?: Prisma.LibWhereInput | Prisma.LibWhereInput[]
  OR?: Prisma.LibWhereInput[]
  NOT?: Prisma.LibWhereInput | Prisma.LibWhereInput[]
  id?: Prisma.StringFilter<"Lib"> | string
  name?: Prisma.StringFilter<"Lib"> | string
  url?: Prisma.StringFilter<"Lib"> | string
  createdAt?: Prisma.DateTimeFilter<"Lib"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Lib"> | Date | string
  projects?: Prisma.ProjectListRelationFilter
}

export type LibOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  projects?: Prisma.ProjectOrderByRelationAggregateInput
}

export type LibWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LibWhereInput | Prisma.LibWhereInput[]
  OR?: Prisma.LibWhereInput[]
  NOT?: Prisma.LibWhereInput | Prisma.LibWhereInput[]
  name?: Prisma.StringFilter<"Lib"> | string
  url?: Prisma.StringFilter<"Lib"> | string
  createdAt?: Prisma.DateTimeFilter<"Lib"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Lib"> | Date | string
  projects?: Prisma.ProjectListRelationFilter
}, "id">

export type LibOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.LibCountOrderByAggregateInput
  _max?: Prisma.LibMaxOrderByAggregateInput
  _min?: Prisma.LibMinOrderByAggregateInput
}

export type LibScalarWhereWithAggregatesInput = {
  AND?: Prisma.LibScalarWhereWithAggregatesInput | Prisma.LibScalarWhereWithAggregatesInput[]
  OR?: Prisma.LibScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LibScalarWhereWithAggregatesInput | Prisma.LibScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Lib"> | string
  name?: Prisma.StringWithAggregatesFilter<"Lib"> | string
  url?: Prisma.StringWithAggregatesFilter<"Lib"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Lib"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Lib"> | Date | string
}

export type LibCreateInput = {
  id?: string
  name: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  projects?: Prisma.ProjectCreateNestedManyWithoutLibsInput
}

export type LibUncheckedCreateInput = {
  id?: string
  name: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
  projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutLibsInput
}

export type LibUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projects?: Prisma.ProjectUpdateManyWithoutLibsNestedInput
}

export type LibUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projects?: Prisma.ProjectUncheckedUpdateManyWithoutLibsNestedInput
}

export type LibCreateManyInput = {
  id?: string
  name: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LibUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LibUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LibListRelationFilter = {
  every?: Prisma.LibWhereInput
  some?: Prisma.LibWhereInput
  none?: Prisma.LibWhereInput
}

export type LibOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LibCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LibMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LibMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  url?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LibCreateNestedManyWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.LibCreateWithoutProjectsInput, Prisma.LibUncheckedCreateWithoutProjectsInput> | Prisma.LibCreateWithoutProjectsInput[] | Prisma.LibUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.LibCreateOrConnectWithoutProjectsInput | Prisma.LibCreateOrConnectWithoutProjectsInput[]
  connect?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
}

export type LibUncheckedCreateNestedManyWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.LibCreateWithoutProjectsInput, Prisma.LibUncheckedCreateWithoutProjectsInput> | Prisma.LibCreateWithoutProjectsInput[] | Prisma.LibUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.LibCreateOrConnectWithoutProjectsInput | Prisma.LibCreateOrConnectWithoutProjectsInput[]
  connect?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
}

export type LibUpdateManyWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.LibCreateWithoutProjectsInput, Prisma.LibUncheckedCreateWithoutProjectsInput> | Prisma.LibCreateWithoutProjectsInput[] | Prisma.LibUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.LibCreateOrConnectWithoutProjectsInput | Prisma.LibCreateOrConnectWithoutProjectsInput[]
  upsert?: Prisma.LibUpsertWithWhereUniqueWithoutProjectsInput | Prisma.LibUpsertWithWhereUniqueWithoutProjectsInput[]
  set?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
  disconnect?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
  delete?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
  connect?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
  update?: Prisma.LibUpdateWithWhereUniqueWithoutProjectsInput | Prisma.LibUpdateWithWhereUniqueWithoutProjectsInput[]
  updateMany?: Prisma.LibUpdateManyWithWhereWithoutProjectsInput | Prisma.LibUpdateManyWithWhereWithoutProjectsInput[]
  deleteMany?: Prisma.LibScalarWhereInput | Prisma.LibScalarWhereInput[]
}

export type LibUncheckedUpdateManyWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.LibCreateWithoutProjectsInput, Prisma.LibUncheckedCreateWithoutProjectsInput> | Prisma.LibCreateWithoutProjectsInput[] | Prisma.LibUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.LibCreateOrConnectWithoutProjectsInput | Prisma.LibCreateOrConnectWithoutProjectsInput[]
  upsert?: Prisma.LibUpsertWithWhereUniqueWithoutProjectsInput | Prisma.LibUpsertWithWhereUniqueWithoutProjectsInput[]
  set?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
  disconnect?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
  delete?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
  connect?: Prisma.LibWhereUniqueInput | Prisma.LibWhereUniqueInput[]
  update?: Prisma.LibUpdateWithWhereUniqueWithoutProjectsInput | Prisma.LibUpdateWithWhereUniqueWithoutProjectsInput[]
  updateMany?: Prisma.LibUpdateManyWithWhereWithoutProjectsInput | Prisma.LibUpdateManyWithWhereWithoutProjectsInput[]
  deleteMany?: Prisma.LibScalarWhereInput | Prisma.LibScalarWhereInput[]
}

export type LibCreateWithoutProjectsInput = {
  id?: string
  name: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LibUncheckedCreateWithoutProjectsInput = {
  id?: string
  name: string
  url: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LibCreateOrConnectWithoutProjectsInput = {
  where: Prisma.LibWhereUniqueInput
  create: Prisma.XOR<Prisma.LibCreateWithoutProjectsInput, Prisma.LibUncheckedCreateWithoutProjectsInput>
}

export type LibUpsertWithWhereUniqueWithoutProjectsInput = {
  where: Prisma.LibWhereUniqueInput
  update: Prisma.XOR<Prisma.LibUpdateWithoutProjectsInput, Prisma.LibUncheckedUpdateWithoutProjectsInput>
  create: Prisma.XOR<Prisma.LibCreateWithoutProjectsInput, Prisma.LibUncheckedCreateWithoutProjectsInput>
}

export type LibUpdateWithWhereUniqueWithoutProjectsInput = {
  where: Prisma.LibWhereUniqueInput
  data: Prisma.XOR<Prisma.LibUpdateWithoutProjectsInput, Prisma.LibUncheckedUpdateWithoutProjectsInput>
}

export type LibUpdateManyWithWhereWithoutProjectsInput = {
  where: Prisma.LibScalarWhereInput
  data: Prisma.XOR<Prisma.LibUpdateManyMutationInput, Prisma.LibUncheckedUpdateManyWithoutProjectsInput>
}

export type LibScalarWhereInput = {
  AND?: Prisma.LibScalarWhereInput | Prisma.LibScalarWhereInput[]
  OR?: Prisma.LibScalarWhereInput[]
  NOT?: Prisma.LibScalarWhereInput | Prisma.LibScalarWhereInput[]
  id?: Prisma.StringFilter<"Lib"> | string
  name?: Prisma.StringFilter<"Lib"> | string
  url?: Prisma.StringFilter<"Lib"> | string
  createdAt?: Prisma.DateTimeFilter<"Lib"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Lib"> | Date | string
}

export type LibUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LibUncheckedUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LibUncheckedUpdateManyWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type LibCountOutputType
 */

export type LibCountOutputType = {
  projects: number
}

export type LibCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | LibCountOutputTypeCountProjectsArgs
}

/**
 * LibCountOutputType without action
 */
export type LibCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LibCountOutputType
   */
  select?: Prisma.LibCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LibCountOutputType without action
 */
export type LibCountOutputTypeCountProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
}


export type LibSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  url?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  projects?: boolean | Prisma.Lib$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.LibCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lib"]>

export type LibSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  url?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["lib"]>

export type LibSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  url?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["lib"]>

export type LibSelectScalar = {
  id?: boolean
  name?: boolean
  url?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type LibOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "url" | "createdAt" | "updatedAt", ExtArgs["result"]["lib"]>
export type LibInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | Prisma.Lib$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.LibCountOutputTypeDefaultArgs<ExtArgs>
}
export type LibIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type LibIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $LibPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Lib"
  objects: {
    projects: Prisma.$ProjectPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    url: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["lib"]>
  composites: {}
}

export type LibGetPayload<S extends boolean | null | undefined | LibDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LibPayload, S>

export type LibCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LibFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LibCountAggregateInputType | true
  }

export interface LibDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lib'], meta: { name: 'Lib' } }
  /**
   * Find zero or one Lib that matches the filter.
   * @param {LibFindUniqueArgs} args - Arguments to find a Lib
   * @example
   * // Get one Lib
   * const lib = await prisma.lib.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LibFindUniqueArgs>(args: Prisma.SelectSubset<T, LibFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LibClient<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Lib that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LibFindUniqueOrThrowArgs} args - Arguments to find a Lib
   * @example
   * // Get one Lib
   * const lib = await prisma.lib.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LibFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LibFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LibClient<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lib that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibFindFirstArgs} args - Arguments to find a Lib
   * @example
   * // Get one Lib
   * const lib = await prisma.lib.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LibFindFirstArgs>(args?: Prisma.SelectSubset<T, LibFindFirstArgs<ExtArgs>>): Prisma.Prisma__LibClient<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Lib that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibFindFirstOrThrowArgs} args - Arguments to find a Lib
   * @example
   * // Get one Lib
   * const lib = await prisma.lib.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LibFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LibFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LibClient<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Libs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Libs
   * const libs = await prisma.lib.findMany()
   * 
   * // Get first 10 Libs
   * const libs = await prisma.lib.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const libWithIdOnly = await prisma.lib.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LibFindManyArgs>(args?: Prisma.SelectSubset<T, LibFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Lib.
   * @param {LibCreateArgs} args - Arguments to create a Lib.
   * @example
   * // Create one Lib
   * const Lib = await prisma.lib.create({
   *   data: {
   *     // ... data to create a Lib
   *   }
   * })
   * 
   */
  create<T extends LibCreateArgs>(args: Prisma.SelectSubset<T, LibCreateArgs<ExtArgs>>): Prisma.Prisma__LibClient<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Libs.
   * @param {LibCreateManyArgs} args - Arguments to create many Libs.
   * @example
   * // Create many Libs
   * const lib = await prisma.lib.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LibCreateManyArgs>(args?: Prisma.SelectSubset<T, LibCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Libs and returns the data saved in the database.
   * @param {LibCreateManyAndReturnArgs} args - Arguments to create many Libs.
   * @example
   * // Create many Libs
   * const lib = await prisma.lib.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Libs and only return the `id`
   * const libWithIdOnly = await prisma.lib.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LibCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LibCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Lib.
   * @param {LibDeleteArgs} args - Arguments to delete one Lib.
   * @example
   * // Delete one Lib
   * const Lib = await prisma.lib.delete({
   *   where: {
   *     // ... filter to delete one Lib
   *   }
   * })
   * 
   */
  delete<T extends LibDeleteArgs>(args: Prisma.SelectSubset<T, LibDeleteArgs<ExtArgs>>): Prisma.Prisma__LibClient<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Lib.
   * @param {LibUpdateArgs} args - Arguments to update one Lib.
   * @example
   * // Update one Lib
   * const lib = await prisma.lib.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LibUpdateArgs>(args: Prisma.SelectSubset<T, LibUpdateArgs<ExtArgs>>): Prisma.Prisma__LibClient<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Libs.
   * @param {LibDeleteManyArgs} args - Arguments to filter Libs to delete.
   * @example
   * // Delete a few Libs
   * const { count } = await prisma.lib.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LibDeleteManyArgs>(args?: Prisma.SelectSubset<T, LibDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Libs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Libs
   * const lib = await prisma.lib.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LibUpdateManyArgs>(args: Prisma.SelectSubset<T, LibUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Libs and returns the data updated in the database.
   * @param {LibUpdateManyAndReturnArgs} args - Arguments to update many Libs.
   * @example
   * // Update many Libs
   * const lib = await prisma.lib.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Libs and only return the `id`
   * const libWithIdOnly = await prisma.lib.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LibUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LibUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Lib.
   * @param {LibUpsertArgs} args - Arguments to update or create a Lib.
   * @example
   * // Update or create a Lib
   * const lib = await prisma.lib.upsert({
   *   create: {
   *     // ... data to create a Lib
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Lib we want to update
   *   }
   * })
   */
  upsert<T extends LibUpsertArgs>(args: Prisma.SelectSubset<T, LibUpsertArgs<ExtArgs>>): Prisma.Prisma__LibClient<runtime.Types.Result.GetResult<Prisma.$LibPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Libs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibCountArgs} args - Arguments to filter Libs to count.
   * @example
   * // Count the number of Libs
   * const count = await prisma.lib.count({
   *   where: {
   *     // ... the filter for the Libs we want to count
   *   }
   * })
  **/
  count<T extends LibCountArgs>(
    args?: Prisma.Subset<T, LibCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LibCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Lib.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LibAggregateArgs>(args: Prisma.Subset<T, LibAggregateArgs>): Prisma.PrismaPromise<GetLibAggregateType<T>>

  /**
   * Group by Lib.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LibGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LibGroupByArgs['orderBy'] }
      : { orderBy?: LibGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LibGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Lib model
 */
readonly fields: LibFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Lib.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LibClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  projects<T extends Prisma.Lib$projectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Lib$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Lib model
 */
export interface LibFieldRefs {
  readonly id: Prisma.FieldRef<"Lib", 'String'>
  readonly name: Prisma.FieldRef<"Lib", 'String'>
  readonly url: Prisma.FieldRef<"Lib", 'String'>
  readonly createdAt: Prisma.FieldRef<"Lib", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Lib", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Lib findUnique
 */
export type LibFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * Filter, which Lib to fetch.
   */
  where: Prisma.LibWhereUniqueInput
}

/**
 * Lib findUniqueOrThrow
 */
export type LibFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * Filter, which Lib to fetch.
   */
  where: Prisma.LibWhereUniqueInput
}

/**
 * Lib findFirst
 */
export type LibFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * Filter, which Lib to fetch.
   */
  where?: Prisma.LibWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Libs to fetch.
   */
  orderBy?: Prisma.LibOrderByWithRelationInput | Prisma.LibOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Libs.
   */
  cursor?: Prisma.LibWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Libs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Libs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Libs.
   */
  distinct?: Prisma.LibScalarFieldEnum | Prisma.LibScalarFieldEnum[]
}

/**
 * Lib findFirstOrThrow
 */
export type LibFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * Filter, which Lib to fetch.
   */
  where?: Prisma.LibWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Libs to fetch.
   */
  orderBy?: Prisma.LibOrderByWithRelationInput | Prisma.LibOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Libs.
   */
  cursor?: Prisma.LibWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Libs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Libs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Libs.
   */
  distinct?: Prisma.LibScalarFieldEnum | Prisma.LibScalarFieldEnum[]
}

/**
 * Lib findMany
 */
export type LibFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * Filter, which Libs to fetch.
   */
  where?: Prisma.LibWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Libs to fetch.
   */
  orderBy?: Prisma.LibOrderByWithRelationInput | Prisma.LibOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Libs.
   */
  cursor?: Prisma.LibWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Libs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Libs.
   */
  skip?: number
  distinct?: Prisma.LibScalarFieldEnum | Prisma.LibScalarFieldEnum[]
}

/**
 * Lib create
 */
export type LibCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * The data needed to create a Lib.
   */
  data: Prisma.XOR<Prisma.LibCreateInput, Prisma.LibUncheckedCreateInput>
}

/**
 * Lib createMany
 */
export type LibCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Libs.
   */
  data: Prisma.LibCreateManyInput | Prisma.LibCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Lib createManyAndReturn
 */
export type LibCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * The data used to create many Libs.
   */
  data: Prisma.LibCreateManyInput | Prisma.LibCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Lib update
 */
export type LibUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * The data needed to update a Lib.
   */
  data: Prisma.XOR<Prisma.LibUpdateInput, Prisma.LibUncheckedUpdateInput>
  /**
   * Choose, which Lib to update.
   */
  where: Prisma.LibWhereUniqueInput
}

/**
 * Lib updateMany
 */
export type LibUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Libs.
   */
  data: Prisma.XOR<Prisma.LibUpdateManyMutationInput, Prisma.LibUncheckedUpdateManyInput>
  /**
   * Filter which Libs to update
   */
  where?: Prisma.LibWhereInput
  /**
   * Limit how many Libs to update.
   */
  limit?: number
}

/**
 * Lib updateManyAndReturn
 */
export type LibUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * The data used to update Libs.
   */
  data: Prisma.XOR<Prisma.LibUpdateManyMutationInput, Prisma.LibUncheckedUpdateManyInput>
  /**
   * Filter which Libs to update
   */
  where?: Prisma.LibWhereInput
  /**
   * Limit how many Libs to update.
   */
  limit?: number
}

/**
 * Lib upsert
 */
export type LibUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * The filter to search for the Lib to update in case it exists.
   */
  where: Prisma.LibWhereUniqueInput
  /**
   * In case the Lib found by the `where` argument doesn't exist, create a new Lib with this data.
   */
  create: Prisma.XOR<Prisma.LibCreateInput, Prisma.LibUncheckedCreateInput>
  /**
   * In case the Lib was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LibUpdateInput, Prisma.LibUncheckedUpdateInput>
}

/**
 * Lib delete
 */
export type LibDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
  /**
   * Filter which Lib to delete.
   */
  where: Prisma.LibWhereUniqueInput
}

/**
 * Lib deleteMany
 */
export type LibDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Libs to delete
   */
  where?: Prisma.LibWhereInput
  /**
   * Limit how many Libs to delete.
   */
  limit?: number
}

/**
 * Lib.projects
 */
export type Lib$projectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  cursor?: Prisma.ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Lib without action
 */
export type LibDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lib
   */
  select?: Prisma.LibSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lib
   */
  omit?: Prisma.LibOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibInclude<ExtArgs> | null
}
